package org.chumin.asyncordersystem.billingservice;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.chumin.asyncordersystem.orderservice.model.Order;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.support.Acknowledgment;
import org.springframework.stereotype.Service;

/**
 * –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –±–∏–ª–ª–∏–Ω–≥–∞.
 * <p>
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka-—Ç–æ–ø–∏–∫–∞ "orders" –∏ –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
 */
@Slf4j
@Service
public class BillingService {
    @PostConstruct
    public void init() {
        log.info("[BillingService] Kafka listener initialized and ready.");
    }


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ Kafka-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º.
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ KafkaListener'–æ–º –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ "orders".
     *
     * @param orderRecord —Å–æ–æ–±—â–µ–Ω–∏–µ Kafka, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∑–∞–∫–∞–∑
     */
    @KafkaListener(topics = "orders", groupId = "billing-group")
    public void handleOrder(ConsumerRecord<String, Order> orderRecord, Acknowledgment ack) {
        Order order = orderRecord.value();
        log.info("[BillingService] –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: id={}, product={}, quantity={}",
                order.getId(), order.getProduct(), order.getQuantity());
        /*
            TODO:  if (notificationAlreadySent(order.getId())) {
            log.info("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É id={} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", order.getId());
            ack.acknowledge();
            return; } -> —ç—Ç–æ —á–µ—Ä–µ–∑ –ë–î –∏–ª–∏ —á–µ—Ä–µ–∑ REDIS
 üí∏         –≠–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–Ω–µ–≥
        */

        double unitPrice = getPrice(order.getProduct());
        double totalAmount = unitPrice * order.getQuantity();

        log.info("[BillingService] –°–ø–∏—Å–∞–Ω–æ {:.2f} ‚ÇΩ –∑–∞ –∑–∞–∫–∞–∑ id={} ({} x {:.2f})",
                totalAmount, order.getId(), order.getQuantity(), unitPrice);
        ack.acknowledge(); // —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å Kafka –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç offset
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞.
     * <p>
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.
     *
     * @param product –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @return —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
     */
    private double getPrice(String product) {
        return switch (product.toLowerCase()) {
            case "laptop" -> 75000;
            case "phone" -> 40000;
            case "tablet" -> 30000;
            default -> 10000;
        };
    }
}
